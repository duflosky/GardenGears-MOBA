//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Scripts/ActionMaps/PlayerInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputs : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputs"",
    ""maps"": [
        {
            ""name"": ""Movement"",
            ""id"": ""c51088cb-d5ed-4803-8d45-a508157667c3"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""efd94aa1-b8b8-49c4-a8e9-7673df0cc0c9"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""905b6a6b-0dec-4995-816a-f3a5772e6a9a"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""eb69145b-48be-4ce3-9b66-6b4f8be670e5"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""d4169058-5cd8-40a3-a811-79b8900b7fed"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""d8f5d09c-76d8-4189-baf2-1e6c58cf48b5"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""fbfe2a20-6e0b-42c3-b9ac-6b065ba7aa98"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""Capacity"",
            ""id"": ""1ad1369f-3054-4487-84cc-92a46f61278a"",
            ""actions"": [
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""b7d95e2b-6e6e-454d-93f7-3859ed6db663"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Capacity1"",
                    ""type"": ""Button"",
                    ""id"": ""69b3dbeb-9d62-4040-8069-29ece82405be"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Capacity2"",
                    ""type"": ""Button"",
                    ""id"": ""60258e78-bf49-4b65-98b6-960321c73b0b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Ultime"",
                    ""type"": ""Button"",
                    ""id"": ""4066f0d7-3890-4e93-b91d-2252531678e5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""31ef5a54-20fe-4f1b-a2ab-ff4c933f194a"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Capacity2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d81835f5-f080-4ee4-b222-4b33eac0df33"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Ultime"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f56615d0-90a6-463f-994e-502b8893177b"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dfccd1af-df03-4fdc-990f-4d6028599b7f"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Capacity1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Mouse"",
            ""id"": ""a4aaa245-b2ed-47a0-8198-60dc0e3814b8"",
            ""actions"": [
                {
                    ""name"": ""MousePos"",
                    ""type"": ""Value"",
                    ""id"": ""5583577e-212b-4229-8f35-767d3b363e29"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c4160847-8b2c-4ce0-96ab-e893d29898ff"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MousePos"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Inventory"",
            ""id"": ""b55d1e97-bcae-49d9-a58e-d2726b5a7a44"",
            ""actions"": [
                {
                    ""name"": ""ActivateItem0"",
                    ""type"": ""Button"",
                    ""id"": ""bdc6bcf8-4cd9-4fb5-a464-740314e5f01c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ActivateItem1"",
                    ""type"": ""Button"",
                    ""id"": ""3cb8a159-c4b4-438d-9152-1f9995c2bfc7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ActivateItem2"",
                    ""type"": ""Button"",
                    ""id"": ""5a84e508-516f-491e-97dd-8a3583ae9242"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ShowHideInventory"",
                    ""type"": ""Button"",
                    ""id"": ""73214987-5c82-4e21-b9f7-b8d034315521"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ShowHideShop"",
                    ""type"": ""Button"",
                    ""id"": ""72a46c12-496e-4aef-8ae1-e18543c2c934"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e81b6cf9-3bb5-4446-a473-b1d96db72a17"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ActivateItem0"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""aa3dcf4f-0dac-4b91-9b0b-f30b40fc56bc"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ActivateItem1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0c4bd197-fc82-43b5-a65f-ba9ed725faa3"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ActivateItem2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3d1dac06-959f-4fa4-807b-4cefa88ad282"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ShowHideInventory"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9b264447-1850-4e46-ac1c-613a70e87b5b"",
                    ""path"": ""<Keyboard>/b"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ShowHideShop"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Movement
        m_Movement = asset.FindActionMap("Movement", throwIfNotFound: true);
        m_Movement_Move = m_Movement.FindAction("Move", throwIfNotFound: true);
        // Capacity
        m_Capacity = asset.FindActionMap("Capacity", throwIfNotFound: true);
        m_Capacity_Attack = m_Capacity.FindAction("Attack", throwIfNotFound: true);
        m_Capacity_Capacity1 = m_Capacity.FindAction("Capacity1", throwIfNotFound: true);
        m_Capacity_Capacity2 = m_Capacity.FindAction("Capacity2", throwIfNotFound: true);
        m_Capacity_Ultime = m_Capacity.FindAction("Ultime", throwIfNotFound: true);
        // Mouse
        m_Mouse = asset.FindActionMap("Mouse", throwIfNotFound: true);
        m_Mouse_MousePos = m_Mouse.FindAction("MousePos", throwIfNotFound: true);
        // Inventory
        m_Inventory = asset.FindActionMap("Inventory", throwIfNotFound: true);
        m_Inventory_ActivateItem0 = m_Inventory.FindAction("ActivateItem0", throwIfNotFound: true);
        m_Inventory_ActivateItem1 = m_Inventory.FindAction("ActivateItem1", throwIfNotFound: true);
        m_Inventory_ActivateItem2 = m_Inventory.FindAction("ActivateItem2", throwIfNotFound: true);
        m_Inventory_ShowHideInventory = m_Inventory.FindAction("ShowHideInventory", throwIfNotFound: true);
        m_Inventory_ShowHideShop = m_Inventory.FindAction("ShowHideShop", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Movement
    private readonly InputActionMap m_Movement;
    private IMovementActions m_MovementActionsCallbackInterface;
    private readonly InputAction m_Movement_Move;
    public struct MovementActions
    {
        private @PlayerInputs m_Wrapper;
        public MovementActions(@PlayerInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Movement_Move;
        public InputActionMap Get() { return m_Wrapper.m_Movement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MovementActions set) { return set.Get(); }
        public void SetCallbacks(IMovementActions instance)
        {
            if (m_Wrapper.m_MovementActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_MovementActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_MovementActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_MovementActionsCallbackInterface.OnMove;
            }
            m_Wrapper.m_MovementActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
            }
        }
    }
    public MovementActions @Movement => new MovementActions(this);

    // Capacity
    private readonly InputActionMap m_Capacity;
    private ICapacityActions m_CapacityActionsCallbackInterface;
    private readonly InputAction m_Capacity_Attack;
    private readonly InputAction m_Capacity_Capacity1;
    private readonly InputAction m_Capacity_Capacity2;
    private readonly InputAction m_Capacity_Ultime;
    public struct CapacityActions
    {
        private @PlayerInputs m_Wrapper;
        public CapacityActions(@PlayerInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Attack => m_Wrapper.m_Capacity_Attack;
        public InputAction @Capacity1 => m_Wrapper.m_Capacity_Capacity1;
        public InputAction @Capacity2 => m_Wrapper.m_Capacity_Capacity2;
        public InputAction @Ultime => m_Wrapper.m_Capacity_Ultime;
        public InputActionMap Get() { return m_Wrapper.m_Capacity; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CapacityActions set) { return set.Get(); }
        public void SetCallbacks(ICapacityActions instance)
        {
            if (m_Wrapper.m_CapacityActionsCallbackInterface != null)
            {
                @Attack.started -= m_Wrapper.m_CapacityActionsCallbackInterface.OnAttack;
                @Attack.performed -= m_Wrapper.m_CapacityActionsCallbackInterface.OnAttack;
                @Attack.canceled -= m_Wrapper.m_CapacityActionsCallbackInterface.OnAttack;
                @Capacity1.started -= m_Wrapper.m_CapacityActionsCallbackInterface.OnCapacity1;
                @Capacity1.performed -= m_Wrapper.m_CapacityActionsCallbackInterface.OnCapacity1;
                @Capacity1.canceled -= m_Wrapper.m_CapacityActionsCallbackInterface.OnCapacity1;
                @Capacity2.started -= m_Wrapper.m_CapacityActionsCallbackInterface.OnCapacity2;
                @Capacity2.performed -= m_Wrapper.m_CapacityActionsCallbackInterface.OnCapacity2;
                @Capacity2.canceled -= m_Wrapper.m_CapacityActionsCallbackInterface.OnCapacity2;
                @Ultime.started -= m_Wrapper.m_CapacityActionsCallbackInterface.OnUltime;
                @Ultime.performed -= m_Wrapper.m_CapacityActionsCallbackInterface.OnUltime;
                @Ultime.canceled -= m_Wrapper.m_CapacityActionsCallbackInterface.OnUltime;
            }
            m_Wrapper.m_CapacityActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Attack.started += instance.OnAttack;
                @Attack.performed += instance.OnAttack;
                @Attack.canceled += instance.OnAttack;
                @Capacity1.started += instance.OnCapacity1;
                @Capacity1.performed += instance.OnCapacity1;
                @Capacity1.canceled += instance.OnCapacity1;
                @Capacity2.started += instance.OnCapacity2;
                @Capacity2.performed += instance.OnCapacity2;
                @Capacity2.canceled += instance.OnCapacity2;
                @Ultime.started += instance.OnUltime;
                @Ultime.performed += instance.OnUltime;
                @Ultime.canceled += instance.OnUltime;
            }
        }
    }
    public CapacityActions @Capacity => new CapacityActions(this);

    // Mouse
    private readonly InputActionMap m_Mouse;
    private IMouseActions m_MouseActionsCallbackInterface;
    private readonly InputAction m_Mouse_MousePos;
    public struct MouseActions
    {
        private @PlayerInputs m_Wrapper;
        public MouseActions(@PlayerInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @MousePos => m_Wrapper.m_Mouse_MousePos;
        public InputActionMap Get() { return m_Wrapper.m_Mouse; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MouseActions set) { return set.Get(); }
        public void SetCallbacks(IMouseActions instance)
        {
            if (m_Wrapper.m_MouseActionsCallbackInterface != null)
            {
                @MousePos.started -= m_Wrapper.m_MouseActionsCallbackInterface.OnMousePos;
                @MousePos.performed -= m_Wrapper.m_MouseActionsCallbackInterface.OnMousePos;
                @MousePos.canceled -= m_Wrapper.m_MouseActionsCallbackInterface.OnMousePos;
            }
            m_Wrapper.m_MouseActionsCallbackInterface = instance;
            if (instance != null)
            {
                @MousePos.started += instance.OnMousePos;
                @MousePos.performed += instance.OnMousePos;
                @MousePos.canceled += instance.OnMousePos;
            }
        }
    }
    public MouseActions @Mouse => new MouseActions(this);

    // Inventory
    private readonly InputActionMap m_Inventory;
    private IInventoryActions m_InventoryActionsCallbackInterface;
    private readonly InputAction m_Inventory_ActivateItem0;
    private readonly InputAction m_Inventory_ActivateItem1;
    private readonly InputAction m_Inventory_ActivateItem2;
    private readonly InputAction m_Inventory_ShowHideInventory;
    private readonly InputAction m_Inventory_ShowHideShop;
    public struct InventoryActions
    {
        private @PlayerInputs m_Wrapper;
        public InventoryActions(@PlayerInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @ActivateItem0 => m_Wrapper.m_Inventory_ActivateItem0;
        public InputAction @ActivateItem1 => m_Wrapper.m_Inventory_ActivateItem1;
        public InputAction @ActivateItem2 => m_Wrapper.m_Inventory_ActivateItem2;
        public InputAction @ShowHideInventory => m_Wrapper.m_Inventory_ShowHideInventory;
        public InputAction @ShowHideShop => m_Wrapper.m_Inventory_ShowHideShop;
        public InputActionMap Get() { return m_Wrapper.m_Inventory; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InventoryActions set) { return set.Get(); }
        public void SetCallbacks(IInventoryActions instance)
        {
            if (m_Wrapper.m_InventoryActionsCallbackInterface != null)
            {
                @ActivateItem0.started -= m_Wrapper.m_InventoryActionsCallbackInterface.OnActivateItem0;
                @ActivateItem0.performed -= m_Wrapper.m_InventoryActionsCallbackInterface.OnActivateItem0;
                @ActivateItem0.canceled -= m_Wrapper.m_InventoryActionsCallbackInterface.OnActivateItem0;
                @ActivateItem1.started -= m_Wrapper.m_InventoryActionsCallbackInterface.OnActivateItem1;
                @ActivateItem1.performed -= m_Wrapper.m_InventoryActionsCallbackInterface.OnActivateItem1;
                @ActivateItem1.canceled -= m_Wrapper.m_InventoryActionsCallbackInterface.OnActivateItem1;
                @ActivateItem2.started -= m_Wrapper.m_InventoryActionsCallbackInterface.OnActivateItem2;
                @ActivateItem2.performed -= m_Wrapper.m_InventoryActionsCallbackInterface.OnActivateItem2;
                @ActivateItem2.canceled -= m_Wrapper.m_InventoryActionsCallbackInterface.OnActivateItem2;
                @ShowHideInventory.started -= m_Wrapper.m_InventoryActionsCallbackInterface.OnShowHideInventory;
                @ShowHideInventory.performed -= m_Wrapper.m_InventoryActionsCallbackInterface.OnShowHideInventory;
                @ShowHideInventory.canceled -= m_Wrapper.m_InventoryActionsCallbackInterface.OnShowHideInventory;
                @ShowHideShop.started -= m_Wrapper.m_InventoryActionsCallbackInterface.OnShowHideShop;
                @ShowHideShop.performed -= m_Wrapper.m_InventoryActionsCallbackInterface.OnShowHideShop;
                @ShowHideShop.canceled -= m_Wrapper.m_InventoryActionsCallbackInterface.OnShowHideShop;
            }
            m_Wrapper.m_InventoryActionsCallbackInterface = instance;
            if (instance != null)
            {
                @ActivateItem0.started += instance.OnActivateItem0;
                @ActivateItem0.performed += instance.OnActivateItem0;
                @ActivateItem0.canceled += instance.OnActivateItem0;
                @ActivateItem1.started += instance.OnActivateItem1;
                @ActivateItem1.performed += instance.OnActivateItem1;
                @ActivateItem1.canceled += instance.OnActivateItem1;
                @ActivateItem2.started += instance.OnActivateItem2;
                @ActivateItem2.performed += instance.OnActivateItem2;
                @ActivateItem2.canceled += instance.OnActivateItem2;
                @ShowHideInventory.started += instance.OnShowHideInventory;
                @ShowHideInventory.performed += instance.OnShowHideInventory;
                @ShowHideInventory.canceled += instance.OnShowHideInventory;
                @ShowHideShop.started += instance.OnShowHideShop;
                @ShowHideShop.performed += instance.OnShowHideShop;
                @ShowHideShop.canceled += instance.OnShowHideShop;
            }
        }
    }
    public InventoryActions @Inventory => new InventoryActions(this);
    public interface IMovementActions
    {
        void OnMove(InputAction.CallbackContext context);
    }
    public interface ICapacityActions
    {
        void OnAttack(InputAction.CallbackContext context);
        void OnCapacity1(InputAction.CallbackContext context);
        void OnCapacity2(InputAction.CallbackContext context);
        void OnUltime(InputAction.CallbackContext context);
    }
    public interface IMouseActions
    {
        void OnMousePos(InputAction.CallbackContext context);
    }
    public interface IInventoryActions
    {
        void OnActivateItem0(InputAction.CallbackContext context);
        void OnActivateItem1(InputAction.CallbackContext context);
        void OnActivateItem2(InputAction.CallbackContext context);
        void OnShowHideInventory(InputAction.CallbackContext context);
        void OnShowHideShop(InputAction.CallbackContext context);
    }
}
